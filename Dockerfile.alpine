FROM twdps/circleci-base-image:alpine-6.7.0

LABEL org.opencontainers.image.title="circleci-kube-ops" \
      org.opencontainers.image.description="Alpine-based CircleCI executor image" \
      org.opencontainers.image.documentation="https://github.com/ThoughtWorks-DPS/circleci-kube-ops" \
      org.opencontainers.image.source="https://github.com/ThoughtWorks-DPS/circleci-kube-ops" \
      org.opencontainers.image.url="https://github.com/ThoughtWorks-DPS/circleci-kube-ops" \
      org.opencontainers.image.vendor="ThoughtWorks, Inc." \
      org.opencontainers.image.authors="nic.cheneweth@thoughtworks.com" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.created="CREATED" \
      org.opencontainers.image.version="VERSION"

ENV KUBECTL_VERSION=1.27.3
ENV HELM_VERSION=3.12.1
ENV AWSCLI_VERSION=1.27.160
ENV SONOBUOY_VERSION=0.56.16
ENV BATS_VERSION=1.9.0
ENV AWSPEC_VERSION=1.29.2
ENV INSPEC_VERSION=5.21.29
ENV ARGOCD_VERSION=2.7.6
ENV FLUX_VERSION=2.0.0-rc.5
ENV KIND_VERSION=0.20.0
ENV CHECKOV_VERSION=2.3.301

SHELL ["/bin/ash", "-o", "pipefail", "-c"]

# sudo since twdps circleci remote docker images set the USER=cirlceci
# hadolint ignore=DL3004
RUN sudo bash -c "echo 'http://dl-cdn.alpinelinux.org/alpine/edge/main' >> /etc/apk/repositories" && \
    sudo apk add --no-cache \
             docker==23.0.6-r2 \
             nodejs==18.16.1-r0 \
             npm==9.6.6-r0 \
             python3==3.11.4-r0 \
             ruby==3.2.2-r0 \
             ruby-webrick==1.8.1-r0 \
             ruby-bundler==2.4.12-r0 \
             jq==1.6-r3 && \
    sudo apk add --no-cache --virtual build-dependencies \
             build-base==0.5-r3 \
             ruby-dev==3.2.2-r0 \
             python3-dev==3.11.4-r0 \
             libffi-dev==3.4.4-r2 \
             g++==12.2.1_git20220924-r10 \
             gcc==12.2.1_git20220924-r10 \
             make==4.4.1-r1 && \
    sudo npm install -g \
             bats@$BATS_VERSION && \
    sudo gem install  --no-document \
             awspec:${AWSPEC_VERSION} \
             inspec-bin:${INSPEC_VERSION} \
             json:2.6.1 && \
    sudo python3 -m ensurepip && \
    sudo rm -r /usr/lib/python*/ensurepip && \
    sudo pip3 install --upgrade pip==23.1.2 && \
    if [ ! -e /usr/bin/pip ]; then sudo ln -s /usr/bin/pip3 /usr/bin/pip ; fi && \
    sudo ln -s /usr/bin/pydoc3 /usr/bin/pydoc && \
    sudo pip install \
         checkov==${CHECKOV_VERSION} \
         awscli==${AWSCLI_VERSION} && \
    curl -Lo ./kind https://kind.sigs.k8s.io/dl/v${KIND_VERSION}/kind-linux-amd64 && \
    sudo chmod +x ./kind && \
    sudo mv ./kind /usr/local/bin/kind && \
    curl -SLO "https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl" && \
    sudo chmod +x ./kubectl  && \
    sudo mv ./kubectl /usr/local/bin/kubectl && \
    curl -SLO "https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz" && \
    sudo tar -xf "helm-v${HELM_VERSION}-linux-amd64.tar.gz" && \
    sudo mv linux-amd64/helm /usr/local/bin && \
    sudo rm -rf linux-amd64/ && \
    sudo rm "helm-v${HELM_VERSION}-linux-amd64.tar.gz" && \
    curl -SLO "https://github.com/vmware-tanzu/sonobuoy/releases/download/v${SONOBUOY_VERSION}/sonobuoy_${SONOBUOY_VERSION}_linux_amd64.tar.gz" && \
    sudo tar -xf "sonobuoy_${SONOBUOY_VERSION}_linux_amd64.tar.gz" && \
    sudo mv sonobuoy /usr/local/bin/sonobuoy && \
    sudo rm "sonobuoy_${SONOBUOY_VERSION}_linux_amd64.tar.gz" && sudo rm LICENSE && \
    curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v${ARGOCD_VERSION}/argocd-linux-amd64 && \
    chmod +x argocd && \
    sudo mv ./argocd /usr/local/bin/argocd && \
    sudo bash -c "curl -s https://fluxcd.io/install.sh | sudo FLUX_VERSION=${FLUX_VERSION} bash" && \
    sudo apk del build-dependencies

COPY inspec /etc/chef/accepted_licenses/inspec

USER circleci
